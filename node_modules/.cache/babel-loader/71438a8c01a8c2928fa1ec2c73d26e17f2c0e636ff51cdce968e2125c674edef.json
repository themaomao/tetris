{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useEffect } from \"react\";\nconst defaultDropTime = 1000;\nconst minimumDropTime = 100;\nconst speedIncrement = 50;\n/* const defaultDropTime = 1000;里的1000系统怎么知道是1000毫秒而不是1000秒呢？\n\n在这种情况下，系统默认解释的单位是毫秒。JavaScript 中的时间单位是以毫秒为基准的，因此在这里的 1000 被解释为毫秒。如果你要指定秒数，通常会在数字后面加上 s，例如 5s 表示 5 秒。\n\n如果你在代码中使用类似于 defaultDropTime = 5s 这样的写法，JavaScript 并不会直接理解 s 代表秒，这不是 JavaScript 的标准语法。如果你想要使用秒作为单位，你需要手动将秒数转换为毫秒，例如 defaultDropTime = 5000 表示 5 秒。\n\n*/\n\nexport const useDropTime = ({\n  gameStats\n}) => {\n  _s();\n  /*useDropTime is the selfnamed hook name */\n  const [dropTime, setDropTime] = useState(defaultDropTime);\n  const [previousDropTime, setPreviousDropTime] = useState();\n  const resumeDropTime = useCallback(() => {\n    if (!previousDropTime) {\n      return;\n    }\n    setDropTime(previousDropTime);\n    setPreviousDropTime(null);\n  }, [previousDropTime]);\n  const pauseDropTime = useCallback(() => {\n    if (dropTime) {\n      setPreviousDropTime(dropTime);\n    }\n    setDropTime(null);\n  }, [dropTime, setPreviousDropTime]);\n  useEffect(() => {\n    const speed = speedIncrement * (gameStats.level - 1);\n    const newDropTime = Math.max(defaultDropTime - speed, minimumDropTime);\n    /*Math.max() 是 JavaScript 中的一个内置函数，用于返回一组数字中的最大值。\n    语法：Math.max(num1, num2, ...)。\n    它可以接受任意数量的参数，每个参数都是一个数字。函数会返回这些数字中的最大值。Math.max(defaultDropTime - speed, minimumDropTime) 的作用是从 defaultDropTime - speed 和 minimumDropTime 这两个值中选取较大的值作为结果。这是为了确保计算得到的新方块下落时间间隔不会低于 minimumDropTime\n     */\n    setDropTime(newDropTime);\n  }, [gameStats.level, setDropTime]);\n  return [dropTime, pauseDropTime, resumeDropTime];\n};\n_s(useDropTime, \"ChtgIt+zWP3XZTSpbcKkIY+0ibg=\");","map":{"version":3,"names":["useState","useCallback","useEffect","defaultDropTime","minimumDropTime","speedIncrement","useDropTime","gameStats","_s","dropTime","setDropTime","previousDropTime","setPreviousDropTime","resumeDropTime","pauseDropTime","speed","level","newDropTime","Math","max"],"sources":["/Volumes/React Project/All Project/All React Project/tetrisprac-one-react/src/Hooks/useDropTime.js"],"sourcesContent":["import { useState, useCallback, useEffect } from \"react\";\n\nconst defaultDropTime = 1000;\nconst minimumDropTime = 100;\nconst speedIncrement = 50;\n/* const defaultDropTime = 1000;里的1000系统怎么知道是1000毫秒而不是1000秒呢？\n\n在这种情况下，系统默认解释的单位是毫秒。JavaScript 中的时间单位是以毫秒为基准的，因此在这里的 1000 被解释为毫秒。如果你要指定秒数，通常会在数字后面加上 s，例如 5s 表示 5 秒。\n\n如果你在代码中使用类似于 defaultDropTime = 5s 这样的写法，JavaScript 并不会直接理解 s 代表秒，这不是 JavaScript 的标准语法。如果你想要使用秒作为单位，你需要手动将秒数转换为毫秒，例如 defaultDropTime = 5000 表示 5 秒。\n\n*/\n\nexport const useDropTime = ({ gameStats }) => {\n    /*useDropTime is the selfnamed hook name */\n  const [dropTime, setDropTime] = useState(defaultDropTime);\n  const [previousDropTime, setPreviousDropTime] = useState();\n\n  const resumeDropTime = useCallback(() => {\n    if (!previousDropTime) {\n      return;\n    }\n    setDropTime(previousDropTime);\n    setPreviousDropTime(null);\n  }, [previousDropTime]);\n\n  const pauseDropTime = useCallback(() => {\n    if (dropTime) {\n      setPreviousDropTime(dropTime);\n    }\n    setDropTime(null);\n  }, [dropTime, setPreviousDropTime]);\n\n  useEffect(() => {\n    const speed = speedIncrement * (gameStats.level - 1);\n    const newDropTime = Math.max(defaultDropTime - speed, minimumDropTime);\n/*Math.max() 是 JavaScript 中的一个内置函数，用于返回一组数字中的最大值。\n语法：Math.max(num1, num2, ...)。\n它可以接受任意数量的参数，每个参数都是一个数字。函数会返回这些数字中的最大值。Math.max(defaultDropTime - speed, minimumDropTime) 的作用是从 defaultDropTime - speed 和 minimumDropTime 这两个值中选取较大的值作为结果。这是为了确保计算得到的新方块下落时间间隔不会低于 minimumDropTime\n */\n    setDropTime(newDropTime);\n  }, [gameStats.level, setDropTime]);\n\n  return [dropTime, pauseDropTime, resumeDropTime];\n};\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AAExD,MAAMC,eAAe,GAAG,IAAI;AAC5B,MAAMC,eAAe,GAAG,GAAG;AAC3B,MAAMC,cAAc,GAAG,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAC1C;EACF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAACG,eAAe,CAAC;EACzD,MAAM,CAACQ,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGZ,QAAQ,CAAC,CAAC;EAE1D,MAAMa,cAAc,GAAGZ,WAAW,CAAC,MAAM;IACvC,IAAI,CAACU,gBAAgB,EAAE;MACrB;IACF;IACAD,WAAW,CAACC,gBAAgB,CAAC;IAC7BC,mBAAmB,CAAC,IAAI,CAAC;EAC3B,CAAC,EAAE,CAACD,gBAAgB,CAAC,CAAC;EAEtB,MAAMG,aAAa,GAAGb,WAAW,CAAC,MAAM;IACtC,IAAIQ,QAAQ,EAAE;MACZG,mBAAmB,CAACH,QAAQ,CAAC;IAC/B;IACAC,WAAW,CAAC,IAAI,CAAC;EACnB,CAAC,EAAE,CAACD,QAAQ,EAAEG,mBAAmB,CAAC,CAAC;EAEnCV,SAAS,CAAC,MAAM;IACd,MAAMa,KAAK,GAAGV,cAAc,IAAIE,SAAS,CAACS,KAAK,GAAG,CAAC,CAAC;IACpD,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAChB,eAAe,GAAGY,KAAK,EAAEX,eAAe,CAAC;IAC1E;AACA;AACA;AACA;IACIM,WAAW,CAACO,WAAW,CAAC;EAC1B,CAAC,EAAE,CAACV,SAAS,CAACS,KAAK,EAAEN,WAAW,CAAC,CAAC;EAElC,OAAO,CAACD,QAAQ,EAAEK,aAAa,EAAED,cAAc,CAAC;AAClD,CAAC;AAACL,EAAA,CA/BWF,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}
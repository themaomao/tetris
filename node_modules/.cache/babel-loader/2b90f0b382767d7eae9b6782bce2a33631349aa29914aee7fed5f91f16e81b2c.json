{"ast":null,"code":"var _jsxFileName = \"/Volumes/React Project/All Project/All React Project/tetrisprac-one-react/src/Components/Game.js\",\n  _s = $RefreshSig$();\nimport Menu from \"./Menu\";\nimport Tetris from \"./Tetris\";\nimport { useGameOver } from \"../Hooks/useGameOver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = ({\n  rows,\n  columns\n}) => {\n  _s();\n  const [gameOver, setGameOver, resetGameover] = useGameOver();\n  /* const [gameOver, setGameOver, resetGameover] = useGameOver();\n  和\n  const [gameOver, setGameOver] = useGameOver();\n  中有什么不同？\n  综合起来，两者的区别在于第一个代码行多了一个变量 resetGameover，\n  它可能用于执行某些重置游戏状态的操作，而第二个代码行只关注了游戏状态的\n  获取和设置。具体的功能取决于 useGameOver() 函数的实现。*/\n  const start = () => resetGameover();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Game\",\n    children: gameOver ? /*#__PURE__*/_jsxDEV(Menu, {\n      onClick: start\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(Tetris, {\n      rows: rows,\n      columns: columns,\n      setGameOver: setGameOver\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"uuJHcK9r9WPOPddozNeT2tkhSew=\", false, function () {\n  return [useGameOver];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["Menu","Tetris","useGameOver","jsxDEV","_jsxDEV","Game","rows","columns","_s","gameOver","setGameOver","resetGameover","start","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Volumes/React Project/All Project/All React Project/tetrisprac-one-react/src/Components/Game.js"],"sourcesContent":["import Menu from \"./Menu\";\nimport Tetris from \"./Tetris\";\nimport { useGameOver } from \"../Hooks/useGameOver\";\n\nconst Game = ({ rows, columns }) => {\n    const [gameOver, setGameOver, resetGameover] = useGameOver();\n    /* const [gameOver, setGameOver, resetGameover] = useGameOver();\n和\n const [gameOver, setGameOver] = useGameOver();\n中有什么不同？\n\n综合起来，两者的区别在于第一个代码行多了一个变量 resetGameover，\n它可能用于执行某些重置游戏状态的操作，而第二个代码行只关注了游戏状态的\n获取和设置。具体的功能取决于 useGameOver() 函数的实现。*/ \nconst start = () => resetGameover();\n\nreturn (\n    <div className=\"Game\">\n        {gameOver ? (\n            <Menu onClick={start} />\n        ) : (\n            <Tetris rows={rows} columns = {columns} setGameOver={setGameOver} />\n         )}\n    </div>\n);\n};\nexport default Game;"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,QAAQ;AACzB,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,WAAW,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,IAAI,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAM,CAACC,QAAQ,EAAEC,WAAW,EAAEC,aAAa,CAAC,GAAGT,WAAW,CAAC,CAAC;EAC5D;AACJ;AACA;AACA;AACA;AACA;AACA;EAEA,MAAMU,KAAK,GAAGA,CAAA,KAAMD,aAAa,CAAC,CAAC;EAEnC,oBACIP,OAAA;IAAKS,SAAS,EAAC,MAAM;IAAAC,QAAA,EAChBL,QAAQ,gBACLL,OAAA,CAACJ,IAAI;MAACe,OAAO,EAAEH;IAAM;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAExBf,OAAA,CAACH,MAAM;MAACK,IAAI,EAAEA,IAAK;MAACC,OAAO,EAAIA,OAAQ;MAACG,WAAW,EAAEA;IAAY;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EACrE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV,CAAC;AAACX,EAAA,CArBIH,IAAI;EAAA,QACyCH,WAAW;AAAA;AAAAkB,EAAA,GADxDf,IAAI;AAsBV,eAAeA,IAAI;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
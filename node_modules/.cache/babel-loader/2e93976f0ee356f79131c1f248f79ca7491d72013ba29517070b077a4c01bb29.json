{"ast":null,"code":"import\"./Preview.css\";import React from\"react\";import{buildBoard}from\"../Business/Board\";import{transferToBoard}from\"../Business/Tetrominoes\";import BoardCell from\"../Components/BoardCell\";import{jsx as _jsx}from\"react/jsx-runtime\";var Preview=function Preview(_ref){var tetromino=_ref.tetromino,index=_ref.index;var shape=tetromino.shape,className=tetromino.className;var board=buildBoard({rows:4,columns:4});var style={top:\"\".concat(index*15,\"vw\")};board.rows=transferToBoard({className:className,isOccupied:false,position:{row:0,column:0},rows:board.rows,shape:shape});return/*#__PURE__*/_jsx(\"div\",{className:\"Preview\",style:style,children:/*#__PURE__*/_jsx(\"div\",{className:\"Preview-board\",children:board.rows.map(function(row,y){return row.map(function(cell,x){return/*#__PURE__*/_jsx(BoardCell,{cell:cell},x*board.size.columns+x);});})})});};export default/*#__PURE__*/React.memo(Preview);","map":{"version":3,"names":["React","buildBoard","transferToBoard","BoardCell","jsx","_jsx","Preview","_ref","tetromino","index","shape","className","board","rows","columns","style","top","concat","isOccupied","position","row","column","children","map","y","cell","x","size","memo"],"sources":["/Volumes/React Project/All Project/All React Project/tetrisprac-one-react/src/Components/Preview.js"],"sourcesContent":["import \"./Preview.css\";\nimport React from \"react\";\n\nimport { buildBoard } from \"../Business/Board\";\nimport { transferToBoard } from \"../Business/Tetrominoes\";\n\nimport BoardCell from \"../Components/BoardCell\";\n\nconst Preview = ({ tetromino, index }) => {\n  const { shape, className } = tetromino;\n\n  const board = buildBoard({ rows: 4, columns: 4 });\n\n  const style = { top: `${index * 15}vw` };\n\n  board.rows = transferToBoard({\n    className,\n    isOccupied: false,\n    position: { row: 0, column: 0 },\n    rows: board.rows,\n    shape\n  });\n\n  return (\n    <div className=\"Preview\" style={style}>\n      <div className=\"Preview-board\">\n        {board.rows.map((row, y) =>\n          row.map((cell, x) => (\n            <BoardCell key={x * board.size.columns + x} cell={cell} />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(Preview);"],"mappings":"AAAA,MAAO,eAAe,CACtB,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,OAASC,UAAU,KAAQ,mBAAmB,CAC9C,OAASC,eAAe,KAAQ,yBAAyB,CAEzD,MAAO,CAAAC,SAAS,KAAM,yBAAyB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEhD,GAAM,CAAAC,OAAO,CAAG,QAAV,CAAAA,OAAOA,CAAAC,IAAA,CAA6B,IAAvB,CAAAC,SAAS,CAAAD,IAAA,CAATC,SAAS,CAAEC,KAAK,CAAAF,IAAA,CAALE,KAAK,CACjC,GAAQ,CAAAC,KAAK,CAAgBF,SAAS,CAA9BE,KAAK,CAAEC,SAAS,CAAKH,SAAS,CAAvBG,SAAS,CAExB,GAAM,CAAAC,KAAK,CAAGX,UAAU,CAAC,CAAEY,IAAI,CAAE,CAAC,CAAEC,OAAO,CAAE,CAAE,CAAC,CAAC,CAEjD,GAAM,CAAAC,KAAK,CAAG,CAAEC,GAAG,IAAAC,MAAA,CAAKR,KAAK,CAAG,EAAE,MAAK,CAAC,CAExCG,KAAK,CAACC,IAAI,CAAGX,eAAe,CAAC,CAC3BS,SAAS,CAATA,SAAS,CACTO,UAAU,CAAE,KAAK,CACjBC,QAAQ,CAAE,CAAEC,GAAG,CAAE,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAC/BR,IAAI,CAAED,KAAK,CAACC,IAAI,CAChBH,KAAK,CAALA,KACF,CAAC,CAAC,CAEF,mBACEL,IAAA,QAAKM,SAAS,CAAC,SAAS,CAACI,KAAK,CAAEA,KAAM,CAAAO,QAAA,cACpCjB,IAAA,QAAKM,SAAS,CAAC,eAAe,CAAAW,QAAA,CAC3BV,KAAK,CAACC,IAAI,CAACU,GAAG,CAAC,SAACH,GAAG,CAAEI,CAAC,QACrB,CAAAJ,GAAG,CAACG,GAAG,CAAC,SAACE,IAAI,CAAEC,CAAC,qBACdrB,IAAA,CAACF,SAAS,EAAkCsB,IAAI,CAAEA,IAAK,EAAvCC,CAAC,CAAGd,KAAK,CAACe,IAAI,CAACb,OAAO,CAAGY,CAAgB,CAAC,EAC3D,CAAC,EACJ,CAAC,CACE,CAAC,CACH,CAAC,CAEV,CAAC,CAED,2BAAe1B,KAAK,CAAC4B,IAAI,CAACtB,OAAO,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { defaultCell } from \"../Business/Cell\";\nimport { movePlayer } from \"../Business/PlayerController\";\nimport { transferToBoard } from \"../Business/Tetrominoes\";\nexport const buildBoard = ({\n  rows,\n  columns\n}) => {\n  const builtRows = Array.from({\n    length: rows\n  }, () => Array.from({\n    length: columns\n  }, () => ({\n    ...defaultCell\n  })));\n  return {\n    rows: builtRows,\n    size: {\n      rows,\n      columns\n    }\n  };\n};\nconst findDropPosition = ({\n  board,\n  position,\n  shape\n}) => {\n  let max = board.size.rows - position.row + 1;\n  let row = 0;\n  for (let i = 0; i < max; i++) {\n    const delta = {\n      row: i,\n      column: 0\n    };\n    const result = movePlayer({\n      delta,\n      position,\n      shape,\n      board\n    });\n    const {\n      collided\n    } = result;\n    if (collided) {\n      break;\n    }\n    row = position.row + i;\n  }\n  return {\n    ...position,\n    row\n  };\n};\nexport const nextBoard = ({\n  board,\n  player,\n  resetPlayer,\n  addLinesCleared\n}) => {\n  const {\n    tetromino,\n    position\n  } = player;\n\n  // Copy and clear spaces used by pieces that\n  // hadn't collided and occupied spaces permanently\n  let rows = board.rows.map(row => row.map(cell => cell.occupied ? cell : {\n    ...defaultCell\n  }));\n\n  // Drop position\n  const dropPosition = findDropPosition({\n    board,\n    position,\n    shape: tetromino.shape\n  });\n\n  // Place ghost\n  const className = `${tetromino.className} ${player.isFastDropping ? \"\" : \"ghost\"}`;\n  rows = transferToBoard({\n    className,\n    isOccupied: player.isFastDropping,\n    position: dropPosition,\n    rows,\n    shape: tetromino.shape\n  });\n\n  // Place the piece.\n  // If it collided, mark the board cells as collided\n  if (!player.isFastDropping) {\n    rows = transferToBoard({\n      className: tetromino.className,\n      isOccupied: player.collided,\n      position,\n      rows,\n      shape: tetromino.shape\n    });\n  }\n\n  // Check for cleared lines\n  const blankRow = rows[0].map(_ => ({\n    ...defaultCell\n  }));\n  let linesCleared = 0;\n  rows = rows.reduce((acc, row) => {\n    if (row.every(column => column.occupied)) {\n      linesCleared++;\n      acc.unshift([...blankRow]);\n    } else {\n      acc.push(row);\n    }\n    return acc;\n  }, []);\n  if (linesCleared > 0) {\n    addLinesCleared(linesCleared);\n  }\n\n  // If we collided, reset the player!\n  if (player.collided || player.isFastDropping) {\n    resetPlayer();\n  }\n\n  // Return the next board\n  return {\n    rows,\n    size: {\n      ...board.size\n    }\n  };\n};\nexport const hasCollision = ({\n  board,\n  position,\n  shape\n}) => {\n  for (let y = 0; y < shape.length; y++) {\n    const row = y + position.row;\n    for (let x = 0; x < shape[y].length; x++) {\n      if (shape[y][x]) {\n        const column = x + position.column;\n        if (board.rows[row] && board.rows[row][column] && board.rows[row][column].occupied) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\nexport const isWithinBoard = ({\n  board,\n  position,\n  shape\n}) => {\n  for (let y = 0; y < shape.length; y++) {\n    const row = y + position.row;\n    for (let x = 0; x < shape[y].length; x++) {\n      if (shape[y][x]) {\n        const column = x + position.column;\n        const isValidPosition = board.rows[row] && board.rows[row][column];\n        if (!isValidPosition) return false;\n      }\n    }\n  }\n  return true;\n};","map":{"version":3,"names":["defaultCell","movePlayer","transferToBoard","buildBoard","rows","columns","builtRows","Array","from","length","size","findDropPosition","board","position","shape","max","row","i","delta","column","result","collided","nextBoard","player","resetPlayer","addLinesCleared","tetromino","map","cell","occupied","dropPosition","className","isFastDropping","isOccupied","blankRow","_","linesCleared","reduce","acc","every","unshift","push","hasCollision","y","x","isWithinBoard","isValidPosition"],"sources":["/Volumes/React Project/All Project/All React Project/tetrisprac-one-react/src/Business/Board.js"],"sourcesContent":["import { defaultCell } from \"../Business/Cell\";\nimport { movePlayer } from \"../Business/PlayerController\";\nimport { transferToBoard } from \"../Business/Tetrominoes\";\n\nexport const buildBoard = ({ rows, columns }) => {\n  const builtRows = Array.from({ length: rows }, () =>\n    Array.from({ length: columns }, () => ({ ...defaultCell }))\n  );\n\n  return {\n    rows: builtRows,\n    size: { rows, columns }\n  };\n};\n\nconst findDropPosition = ({ board, position, shape }) => {\n  let max = board.size.rows - position.row + 1;\n  let row = 0;\n\n  for (let i = 0; i < max; i++) {\n    const delta = { row: i, column: 0 };\n    const result = movePlayer({ delta, position, shape, board });\n    const { collided } = result;\n\n    if (collided) {\n      break;\n    }\n\n    row = position.row + i;\n  }\n\n  return { ...position, row };\n};\n\nexport const nextBoard = ({ board, player, resetPlayer, addLinesCleared }) => {\n  const { tetromino, position } = player;\n\n  // Copy and clear spaces used by pieces that\n  // hadn't collided and occupied spaces permanently\n  let rows = board.rows.map((row) =>\n    row.map((cell) => (cell.occupied ? cell : { ...defaultCell }))\n  );\n\n  // Drop position\n  const dropPosition = findDropPosition({\n    board,\n    position,\n    shape: tetromino.shape\n  });\n\n  // Place ghost\n  const className = `${tetromino.className} ${\n    player.isFastDropping ? \"\" : \"ghost\"\n  }`;\n  rows = transferToBoard({\n    className,\n    isOccupied: player.isFastDropping,\n    position: dropPosition,\n    rows,\n    shape: tetromino.shape\n  });\n\n  // Place the piece.\n  // If it collided, mark the board cells as collided\n  if (!player.isFastDropping) {\n    rows = transferToBoard({\n      className: tetromino.className,\n      isOccupied: player.collided,\n      position,\n      rows,\n      shape: tetromino.shape\n    });\n  }\n\n  // Check for cleared lines\n  const blankRow = rows[0].map((_) => ({ ...defaultCell }));\n  let linesCleared = 0;\n  rows = rows.reduce((acc, row) => {\n    if (row.every((column) => column.occupied)) {\n      linesCleared++;\n      acc.unshift([...blankRow]);\n    } else {\n      acc.push(row);\n    }\n\n    return acc;\n  }, []);\n\n  if (linesCleared > 0) {\n    addLinesCleared(linesCleared);\n  }\n\n  // If we collided, reset the player!\n  if (player.collided || player.isFastDropping) {\n    resetPlayer();\n  }\n\n  // Return the next board\n  return {\n    rows,\n    size: { ...board.size }\n  };\n};\n\nexport const hasCollision = ({ board, position, shape }) => {\n  for (let y = 0; y < shape.length; y++) {\n    const row = y + position.row;\n\n    for (let x = 0; x < shape[y].length; x++) {\n      if (shape[y][x]) {\n        const column = x + position.column;\n\n        if (\n          board.rows[row] &&\n          board.rows[row][column] &&\n          board.rows[row][column].occupied\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n};\n\nexport const isWithinBoard = ({ board, position, shape }) => {\n  for (let y = 0; y < shape.length; y++) {\n    const row = y + position.row;\n\n    for (let x = 0; x < shape[y].length; x++) {\n      if (shape[y][x]) {\n        const column = x + position.column;\n        const isValidPosition = board.rows[row] && board.rows[row][column];\n\n        if (!isValidPosition) return false;\n      }\n    }\n  }\n\n  return true;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}